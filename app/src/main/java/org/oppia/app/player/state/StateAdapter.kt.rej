diff a/app/src/main/java/org/oppia/app/player/state/StateAdapter.kt b/app/src/main/java/org/oppia/app/player/state/StateAdapter.kt	(rejected hunks)
@@ -7,14 +7,18 @@ import androidx.databinding.DataBindingUtil
 import androidx.databinding.ViewDataBinding
 import androidx.recyclerview.widget.RecyclerView
 import androidx.databinding.library.baseAdapters.BR
-import kotlinx.android.synthetic.main.content_item.view.*
+import kotlinx.android.synthetic.main.content_item.view.content_text_view
+import kotlinx.android.synthetic.main.selection_interaction_item.view.selection_interaction_recyclerview
 import kotlinx.android.synthetic.main.state_button_item.view.*
 import org.oppia.app.R
 import org.oppia.app.databinding.ContentItemBinding
+import org.oppia.app.databinding.SelectionInteractionItemBinding
 import org.oppia.app.player.state.itemviewmodel.StateButtonViewModel
 import org.oppia.app.player.state.listener.ButtonInteractionListener
 import org.oppia.app.databinding.StateButtonItemBinding
 import org.oppia.app.player.state.itemviewmodel.ContentViewModel
+import org.oppia.app.player.state.itemviewmodel.SelectionInteractionCustomizationArgsViewModel
+import org.oppia.app.player.state.itemviewmodel.SelectionInteractionContentViewModel
 import org.oppia.util.parser.HtmlParser
 
 @Suppress("unused")
@@ -64,6 +69,17 @@ class StateAdapter(
           )
         ContentViewHolder(binding)
       }
+      VIEW_TYPE_SELECTION_INTERACTION -> {
+        val inflater = LayoutInflater.from(parent.context)
+        val binding =
+          DataBindingUtil.inflate<SelectionInteractionItemBinding>(
+            inflater,
+            R.layout.selection_interaction_item,
+            parent,
+            /* attachToParent= */ false
+          )
+        SelectionInteractionViewHolder(binding)
+      }
       else -> throw IllegalArgumentException("Invalid view type")
     }
   }
@@ -76,12 +92,16 @@ class StateAdapter(
       VIEW_TYPE_CONTENT -> {
         (holder as ContentViewHolder).bind((itemList[position] as ContentViewModel).htmlContent)
       }
+      VIEW_TYPE_SELECTION_INTERACTION -> {
+        (holder as SelectionInteractionViewHolder).bind(itemList[position] as SelectionInteractionCustomizationArgsViewModel)
+      }
     }
   }
 
   override fun getItemViewType(position: Int): Int {
     return when (itemList[position]) {
       is ContentViewModel -> VIEW_TYPE_CONTENT
+      is SelectionInteractionCustomizationArgsViewModel -> VIEW_TYPE_SELECTION_INTERACTION
       is StateButtonViewModel -> {
         stateButtonViewModel = itemList[position] as StateButtonViewModel
         VIEW_TYPE_STATE_BUTTON
