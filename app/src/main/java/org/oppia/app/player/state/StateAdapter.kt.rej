diff a/app/src/main/java/org/oppia/app/player/state/StateAdapter.kt b/app/src/main/java/org/oppia/app/player/state/StateAdapter.kt	(rejected hunks)
@@ -14,6 +15,7 @@ import org.oppia.app.player.state.itemviewmodel.StateButtonViewModel
 import org.oppia.app.player.state.listener.ButtonInteractionListener
 import org.oppia.app.databinding.StateButtonItemBinding
 import org.oppia.app.player.state.itemviewmodel.ContentViewModel
+import org.oppia.util.parser.HtmlParser
 
 @Suppress("unused")
 private const val VIEW_TYPE_CONTENT = 1
@@ -47,18 +52,19 @@ class StateAdapter(
             /* attachToParent= */false
           )
         StateButtonViewHolder(binding, buttonInteractionListener)
-      } VIEW_TYPE_CONTENT -> {
+      }
+      VIEW_TYPE_CONTENT -> {
         val inflater = LayoutInflater.from(parent.context)
         val binding =
           DataBindingUtil.inflate<ContentItemBinding>(
             inflater,
             R.layout.content_item,
             parent,
-            /* attachToParent= */false
+            /* attachToParent= */ false
           )
         ContentViewHolder(binding)
       }
-      else -> throw IllegalArgumentException("Invalid view type") as Throwable
+      else -> throw IllegalArgumentException("Invalid view type")
     }
   }
 
@@ -68,8 +74,8 @@ class StateAdapter(
         (holder as StateButtonViewHolder).bind(itemList[position] as StateButtonViewModel)
       }
       VIEW_TYPE_CONTENT -> {
-      (holder as ContentViewHolder).bind((itemList[position] as ContentViewModel).htmlContent)
-    }
+        (holder as ContentViewHolder).bind((itemList[position] as ContentViewModel).htmlContent)
+      }
     }
   }
 
@@ -87,13 +93,19 @@ class StateAdapter(
   override fun getItemCount(): Int {
     return itemList.size
   }
+
   inner class ContentViewHolder(val binding: ViewDataBinding) : RecyclerView.ViewHolder(binding.root) {
-    internal fun bind(rawString: String?) {
+    internal fun bind(rawString: String) {
       binding.setVariable(BR.htmlContent, rawString)
       binding.executePendingBindings()
-      binding.root.content_text_view.text = rawString
+      val htmlResult: Spannable = htmlParserFactory.create(entityType, explorationId).parseOppiaHtml(
+        rawString,
+        binding.root.content_text_view
+      )
+      binding.root.content_text_view.text = htmlResult
     }
   }
+
   private class StateButtonViewHolder(
     val binding: ViewDataBinding,
     private val buttonInteractionListener: ButtonInteractionListener
